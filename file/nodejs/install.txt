mkdir myapp
cd myapp
npm init
npx install express-generator --view=ejs
npm install
npm start
npm install mysql

npx --package express-generator express

npm install body-parser@1.19.0 dotenv@8.2.0 ejs@3.1.5 express@4.17.1

npm install --save-dev @babel/core@7.12.10 @babel/preset-env@7.12.10 @babel/node@7.12.10 nodemon@2.0.7

require('dotenv').config();
const port = process.env.PORT || 8080;

ðŸ‘‰ 1. CÃ i Ä‘áº·t cÃ¡c thÆ° viá»‡n: sequlize-cli, sequelize vÃ  mysql2
npm install --save-dev sequelize-cli@6.2.0
npm install --save mysql2@2.2.5
npm install --save sequelize@6.6.2

ðŸ‘‰ 2. ThÃªm file .sequelizerc táº¡i thÆ° má»¥c root
Ná»™i dung file .sequelizerc
const path = require('path');
module.exports = {
  'config': path.resolve('./src/config', 'config.json'),
  'migrations-path': path.resolve('./src', 'migrations'),
  'models-path': path.resolve('./src', 'models'),
  'seeders-path': path.resolve('./src', 'seeders')
}

ðŸ‘‰ Táº¡i thÆ° má»¥c root, sá»­ dá»¥ng cÃ¢u lá»‡nh: 
npx sequelize-cli init
node_modules/.bin/sequelize init

ðŸ‘‰ 3. Táº¡o model: 
npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string

ðŸ‘‰ 4: Táº¡o migrations:
npx sequelize-cli db:migrate (táº¡o model database)

ðŸ‘‰5. Táº¡o Seeder: npx sequelize-cli seed:generate --name demo-user

 return queryInterface.bulkInsert('Users', [{
      firstName: 'John',
      lastName: 'Doe',
      email: 'example@example.com',
      createdAt: new Date(),
      updatedAt: new Date()
    }]);

npx sequelize-cli db:seed:all ( kiá»ƒm tra lá»—i táº¡o model database)